Testing: JUnit
- Unit testing is a way of testing unit of work in the application
- Mainly done by the developers
- A unit is the smallest testable part of an application
	- You can think of a method as a unit

TDD: Test Driven Development
- A style of programming where test cases are already written
- Code is developed according to the test cases provided
- It can be automated with the help help of tools such as Maven
- It a development paradigm

JUnit annotations:
Life-Cycle annotations
- @BeforeAll
	- Executes once before all test cases
	- Must be a static method
	- Mainly used for initialising object or open db connection etc.
- @AfterAll
	- Executes once after all test cases
	- Must be a static method
	- Mainly used for clean-up operations like closing files and db connections
- @BeforeEach
	- Executes once before each test case
	- Mainly used for initialising values or setting initial object state
- @AfterEach
	- Executes once after each test case

- @Test
	- Must be marked on every test case
- @Disabled
	- To avoid a test case 
- @RunWith

---------------------------------------------------------------
Maven:
* Its a build tool
* Project management tool
- Because it provides solutions for uniformity of versions and dependencies

Maven has POM (Project Object Model)
- Represented with pom.xml file
- It holds project information like package and version
- It holds dependencies of this project to be added/downloaded

Maven Dependency has
- groupId: represents package naming 
- artifactId: represents project or library name
- version: represents version of library of application

Maven Repositories
Maven has two types of repositories: local and remote. Maven usually interacts with your local repository, but when a declared dependency is not present in your local repository Maven searches all the remote repositories it has access to in an attempt to find what's missing.

Project structure
src
 - main		// folder where we write java code
	- java		// folder where we write java code
	- resource		// resources like properties files
 - test
	- java		// folder where we write java test case in JUnit
	- resource		// resources like properties files

Maven Build Phases/Goals
Validate
- Validates that the project is correct and all dependencies are downloaded.
Compile
- Compiles the source code of the project
Test
- Runs the test cases against the compiled source code
Package
- Packs the compiled code in its distributable format, such as jar
Install
- Install the package into the local repository, in case of creating API library
Deploy
- Copies the final package to the remote repository for sharing with Ops
Clean
- Cleans all generated jars and refreshes dependencies

* Every build phase performs all the above phases first.
* Except clean build phase.

--------------------------------------------------------
* Git is a version control tool
* Centralised repository system
* Versions are identified by commits
	- Each commit has a unique message
* It gives us flexibility to switch between versions smoothly
* Supports collaboration so that multiple users can work on single repository
* Supports branches for parallel development of different versions

Git Commands
To check git version
>git --version

To check git configuration details
>git config --list

To initialise current directory as local git repository
>git init

To check the status of files in staging area 
>git status

To add a file into git staging area
>git add filename

To remove all files from staging area
>git reset

To add all files or changes into staging area
>git add -A

To commit changes of staging area into local repository
>git commit -m "commit message"

To check commit status
>git log
>git log --stat

To change commit message
>git commit --amend -m "New commit message"

To link local repository with remote on GitHub
>git remote add origin https://github.com/username/repo.git

To check remote repository details
>git remote
>git remote -v

To push local committed changes to remote repository on Github
>git push -u origin master

To clone git remote repository 
>git clone https://github.com/username/repo.git

To pull git remote repository to merge changes into local
>git pull origin master

To check branches in local git repository
>git branch

To create a separate branch
>git branch branch_name

To switch between branches
>git checkout branch_name

To merge branches into master branch
>git merge branch_name

To delete branch after merging into master
>git branch -d branch_name

